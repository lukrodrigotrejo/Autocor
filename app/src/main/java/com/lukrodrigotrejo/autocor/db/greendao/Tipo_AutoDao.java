package com.lukrodrigotrejo.autocor.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lukrodrigotrejo.autocor.db.greendao.Tipo_Auto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIPO__AUTO".
*/
public class Tipo_AutoDao extends AbstractDao<Tipo_Auto, Long> {

    public static final String TABLENAME = "TIPO__AUTO";

    /**
     * Properties of entity Tipo_Auto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Codigo = new Property(0, Long.class, "Codigo", true, "CODIGO");
        public final static Property Marca = new Property(1, String.class, "Marca", false, "MARCA");
        public final static Property Descripcion = new Property(2, String.class, "Descripcion", false, "DESCRIPCION");
    };


    public Tipo_AutoDao(DaoConfig config) {
        super(config);
    }
    
    public Tipo_AutoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIPO__AUTO\" (" + //
                "\"CODIGO\" INTEGER PRIMARY KEY ," + // 0: Codigo
                "\"MARCA\" TEXT," + // 1: Marca
                "\"DESCRIPCION\" TEXT);"); // 2: Descripcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIPO__AUTO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tipo_Auto entity) {
        stmt.clearBindings();
 
        Long Codigo = entity.getCodigo();
        if (Codigo != null) {
            stmt.bindLong(1, Codigo);
        }
 
        String Marca = entity.getMarca();
        if (Marca != null) {
            stmt.bindString(2, Marca);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(3, Descripcion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tipo_Auto readEntity(Cursor cursor, int offset) {
        Tipo_Auto entity = new Tipo_Auto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Codigo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Marca
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Descripcion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tipo_Auto entity, int offset) {
        entity.setCodigo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMarca(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tipo_Auto entity, long rowId) {
        entity.setCodigo(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tipo_Auto entity) {
        if(entity != null) {
            return entity.getCodigo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public Tipo_Auto getByCodigo(String codigo){
        Tipo_Auto tipo_auto = queryBuilder().where(Properties.Codigo.eq(codigo)).unique();
        return tipo_auto;
    }
}
