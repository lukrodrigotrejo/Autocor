package com.lukrodrigotrejo.autocor.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lukrodrigotrejo.autocor.db.greendao.Stock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK".
*/
public class StockDao extends AbstractDao<Stock, String> {

    public static final String TABLENAME = "STOCK";

    /**
     * Properties of entity Stock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Codigo = new Property(0, String.class, "Codigo", true, "CODIGO");
        public final static Property Marca = new Property(1, String.class, "Marca", false, "MARCA");
        public final static Property Tipo_Auto = new Property(2, Long.class, "Tipo_Auto", false, "TIPO__AUTO");
        public final static Property Rubro = new Property(3, Long.class, "Rubro", false, "RUBRO");
        public final static Property NroOriginal = new Property(4, String.class, "NroOriginal", false, "NRO_ORIGINAL");
        public final static Property Descripcion = new Property(5, String.class, "Descripcion", false, "DESCRIPCION");
        public final static Property Precio = new Property(6, Double.class, "Precio", false, "PRECIO");
    };


    public StockDao(DaoConfig config) {
        super(config);
    }
    
    public StockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK\" (" + //
                "\"CODIGO\" TEXT PRIMARY KEY NOT NULL ," + // 0: Codigo
                "\"MARCA\" TEXT," + // 1: Marca
                "\"TIPO__AUTO\" INTEGER," + // 2: Tipo_Auto
                "\"RUBRO\" INTEGER," + // 3: Rubro
                "\"NRO_ORIGINAL\" TEXT," + // 4: NroOriginal
                "\"DESCRIPCION\" TEXT," + // 5: Descripcion
                "\"PRECIO\" REAL);"); // 6: Precio
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Stock entity) {
        stmt.clearBindings();
 
        String Codigo = entity.getCodigo();
        if (Codigo != null) {
            stmt.bindString(1, Codigo);
        }
 
        String Marca = entity.getMarca();
        if (Marca != null) {
            stmt.bindString(2, Marca);
        }
 
        Long Tipo_Auto = entity.getTipo_Auto();
        if (Tipo_Auto != null) {
            stmt.bindLong(3, Tipo_Auto);
        }
 
        Long Rubro = entity.getRubro();
        if (Rubro != null) {
            stmt.bindLong(4, Rubro);
        }
 
        String NroOriginal = entity.getNroOriginal();
        if (NroOriginal != null) {
            stmt.bindString(5, NroOriginal);
        }
 
        String Descripcion = entity.getDescripcion();
        if (Descripcion != null) {
            stmt.bindString(6, Descripcion);
        }
 
        Double Precio = entity.getPrecio();
        if (Precio != null) {
            stmt.bindDouble(7, Precio);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Stock readEntity(Cursor cursor, int offset) {
        Stock entity = new Stock( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Codigo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Marca
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // Tipo_Auto
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // Rubro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // NroOriginal
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Descripcion
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // Precio
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Stock entity, int offset) {
        entity.setCodigo(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMarca(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTipo_Auto(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRubro(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNroOriginal(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescripcion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrecio(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Stock entity, long rowId) {
        return entity.getCodigo();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Stock entity) {
        if(entity != null) {
            return entity.getCodigo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public Stock getByCodigo(String codigo){
        Stock stock = queryBuilder().where(Properties.Codigo.eq(codigo)).unique();
        return stock;
    }
    
}
